{"version":3,"sources":["components/addcolor.js","components/InputForm.js","components/random.js","components/colors.js","index.js"],"names":["AddColor","onSubmit","className","onClick","ADD_COLOR","gql","InputColor","hex","useMutation","addColor","inputhex","Math","floor","random","toString","inputrgb","replace","match","RegExp","length","map","l","parseInt","join","variables","rgb","COLORS","DEL_COLOR","Color","useSubscription","loading","error","data","delColor","color","id","label","style","right","Card","width","Body","contenteditable","height","backgroundColor","Text","client","ApolloClient","cache","InMemoryCache","link","HttpLink","headers","uri","App","ApolloProvider","render","document","getElementById"],"mappings":"2LAkBeA,EAZG,SAAC,GAAiB,IAAfC,EAAc,EAAdA,SACjB,OACI,qBAAKC,UAAU,SAAf,SAEA,wBAAQC,QAASF,EAAUC,UAAU,sBAArC,SACN,wC,uCCGF,IAAME,EAAUC,YAAD,gKAOE,SAASC,IAEpB,IAbOC,EAaP,EAAgBC,YAAYJ,GAAtBK,EAAN,oBACIC,ECtBE,IADYC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IDwB1DC,EAdC,QAAUR,GADRA,EAeWG,GAdOM,QAAQ,IAAK,KAAKC,MAAM,IAAIC,OAAO,MAAQX,EAAIY,OAAO,EAAI,KAAM,MAAMC,KAAI,SAASC,GAAK,OAAOC,SAASf,EAAIY,OAAO,EAAIE,EAAEA,EAAIA,EAAG,OAAOE,KAAK,KAAO,IAkB5K,OAAQ,cAAC,EAAD,CAERtB,SAAU,WACRQ,EAAS,CAAEe,UAAW,CAAEjB,IAAIG,EAAUe,IAAKV,Q,gEErB7CW,EAASrB,YAAH,2FAUNsB,EAAUtB,YAAD,oIAOE,SAASuB,IACpB,MAA8BC,YAAgBH,GAAvCI,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,MAAOC,EAAvB,EAAuBA,KACvB,EAAgBxB,YAAYmB,GAAtBM,EAAN,oBAEA,OAAGH,EAAgB,2CAChBC,EAAc,sCAKVC,EAAKE,MAAMd,KAAI,gBAAEe,EAAF,EAAEA,GAAG5B,EAAL,EAAKA,IAAI6B,EAAT,EAASA,MAAMX,EAAf,EAAeA,IAAf,OAGpB,qBAAKY,MAAO,CAAEC,MAAO,QAArB,SAEA,cAACC,EAAA,EAAD,CAAerC,UAAU,YAAWmC,MAAO,CAAEG,MAAO,SAApD,SACN,eAACD,EAAA,EAAKE,KAAN,WACE,mBAAGC,gBAAgB,OAAnB,SAA4B,6BAAKN,MACjC,wBAAQjC,QAAS,WACb8B,EAAS,CAAET,UAAW,CAAEW,GAAG,GAAD,OAAIA,OAE5BjC,UAAU,sBAAqBmC,MAAO,CAAEM,OAAQ,OAAQH,MAAM,OACjEI,gBAAgB,GAAD,OAAIrC,MACtB,eAACgC,EAAA,EAAKM,KAAN,mBACOtC,KAEP,cAACgC,EAAA,EAAKM,KAAN,UACGpB,IAGH,cAACc,EAAA,EAAKM,KAAN,QAfeV,QC1BnB,IAAMW,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAS,CAChBC,QAAS,CACE,eAAgB,mBAChB,wBAAyB,oEAErCC,IAAI,4CAIFC,EAAM,kBAER,eAACC,EAAA,EAAD,CAAgBT,OAAQA,EAAxB,UACA,cAAClB,EAAD,IACA,cAACtB,EAAD,QAMJkD,iBAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5be059d8.chunk.js","sourcesContent":["\r\nimport './addcolor.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\n const AddColor = ({ onSubmit}) => {\r\n    return (\r\n        <div className=\"center\">\r\n       \r\n        <button onClick={onSubmit} className=\"button button4 mx-4\">\r\n  <h1>+</h1> \r\n</button>\r\n</div>\r\n\r\n    );\r\n  };\r\n  \r\nexport default AddColor;","import react from \"react\";\r\nimport {useQuery,useMutation,gql} from '@apollo/client';\r\n//import './colors.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport setBg from \"./random\";\r\n//import Rgb from \"./randomRGB\";\r\nimport AddColor from \"./addcolor\";\r\n\r\n\r\nfunction Rgb(hex){\r\n    return 'rgb(' + (hex = hex.replace('#', '')).match(new RegExp('(.{' + hex.length/3 + '})', 'g')).map(function(l) { return parseInt(hex.length%2 ? l+l : l, 16) }).join(',') + ')';\r\n}\r\n\r\nconst ADD_COLOR=gql`\r\nmutation AddNewColor($hex: String!, $rgb: String!) {\r\n  insert_color(objects: {hex: $hex, rgb: $rgb}) {\r\n    affected_rows\r\n  }\r\n}\r\n`;\r\n  export default function InputColor(){\r\n     \r\n      const[addColor]=useMutation(ADD_COLOR); \r\n      let inputhex=setBg();\r\n      let inputrgb= Rgb(inputhex);\r\n\r\n      \r\n      \r\n      return (<AddColor\r\n      \r\n      onSubmit={() => {\r\n        addColor({ variables: { hex:inputhex, rgb: inputrgb } })\r\n          \r\n      }}\r\n      />\r\n\r\n      )\r\n    }\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default function setBg(){\r\n    const randomColor = Math.floor(Math.random()*16777215).toString(16);\r\n    let hex=\"#\" + randomColor;\r\n    return hex;\r\n  }\r\n \r\n\r\n","import react from \"react\";\r\nimport {useSubscription,useMutation,gql} from '@apollo/client';\r\nimport './colors.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport setBg from \"./random\";\r\nimport AddColor from \"./addcolor\";\r\n\r\n\r\n\r\n\r\nconst COLORS = gql`\r\n  {\r\n  color {\r\n    id\r\n    hex\r\n    label\r\n    rgb\r\n  }\r\n  }\r\n`;\r\nconst DEL_COLOR=gql`\r\nmutation MyMutation($id: Int!) {\r\n  delete_color(where: {id: {_eq: $id}}) {\r\n    affected_rows\r\n  }\r\n}\r\n`;\r\n  export default function Color(){\r\n      const{ loading, error, data }=useSubscription(COLORS);\r\n      const[delColor]=useMutation(DEL_COLOR); \r\n\r\n      if(loading) return <p>loading...</p>;\r\n      if(error) return <p>error</p>;\r\n      \r\n\r\n      \r\n      \r\n      return data.color.map(({id,hex,label,rgb})=>(\r\n  \r\n        \r\n        <div style={{ right: '20px' }}>\r\n  \r\n        <Card key={id} className=\"my-4 mx-4\"style={{ width: '16rem' }}>\r\n  <Card.Body>\r\n    <p contenteditable=\"true\"  ><h2>{label}</h2></p>\r\n    <button onClick={() => {\r\n        delColor({ variables: { id:`${id}` } })\r\n          \r\n      }}  className=\"del mb-2 text-muted\"style={{ height: '80px', width:'100%'\r\n      ,backgroundColor:`${hex}`}} ></button>\r\n    <Card.Text>\r\n     HEX: {hex}\r\n    </Card.Text>\r\n    <Card.Text>\r\n      {rgb}\r\n      \r\n    </Card.Text>\r\n    <Card.Text>\r\n      \r\n    </Card.Text>\r\n    \r\n    \r\n  </Card.Body>\r\n</Card>\r\n\r\n\r\n</div>\r\n ));}\r\n","//import React from \"react\";\nimport { render } from \"react-dom\";\nimport Card from \"react-bootstrap/Card\";\nimport AddColor from \"./components/addcolor\";\nimport InputColor from \"./components/InputForm\";\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n\n} from \"@apollo/client\";\nimport Color from \"./components/colors\"\n\n\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n     headers: {\n                'content-type': 'application/json',\n                'x-hasura-admin-secret': 'M28GcowM84zPTQ0KtxMHj9Q30OQwoO6Z3k95Ap4V9Zr2opLGfT5PRdR7rUwZRkv0',\n            },\n    uri:'https://demoxyz.hasura.app/v1/graphql',\n  })\n});\n\nconst App = () => (\n\n    <ApolloProvider client={client}>\n    <Color/>\n    <InputColor/>\n      \n    </ApolloProvider>\n  \n);\n\nrender(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}